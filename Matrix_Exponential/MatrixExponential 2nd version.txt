//link-https://www.hackerearth.com/practice/notes/matrix-exponentiation-1/
const int MOD = 1e9 + 7;

class Matrix
{
public:
    vector<vector<ll>> mat; // the contents of matrix as a 2D-vector
    int n_rows, n_cols;      // number of rows and columns
    Matrix(vector<vector<ll>> values) : mat(values), n_rows(values.size()), n_cols(values[0].size()) {}

    static Matrix identity_matrix(int n)
    {
        // Return I_n - the identity matrix of size n.
        // This function is static, because it creates a new Matrix instance
        vector<vector<ll>> values(n, vector<ll>(n, 0));
        for (int i = 0; i < n; i++)
            values[i][i] = 1;
        return values;
    }

    Matrix operator*(const Matrix &other) const
    {
        int n = n_rows, m = other.n_cols;
        vector<vector<ll>> result(n_rows, vector<ll>(m, 0));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
            {
                ll sum = 0;
                for (int k = 0; k < n_cols; k++)
                {
                    sum += (mat[i][k] * 1ll * other.mat[k][j]) % MOD;
                    sum %= MOD;
                }
                result[i][j] = sum;
            }
        // Multiply matrices as usual, then return the result as the new Matrix
        return Matrix(result);
    }

    inline bool is_square() const
    {
        return n_rows == n_cols;
    }
};

Matrix fast_exponentiation(Matrix m, ll power)
{
    assert(m.is_square());
    Matrix result = Matrix::identity_matrix(m.n_rows);
   ll cnt=0;
    while (power)
    {
        if (power & 1)
            result = result * m;
        m = m * m;
        power >>= 1;
        // if(cnt++==1000)break;
        // cout<<power<<endl;
    }

    return result;
}