// Faruk
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define YES cout << "YES" << endl;
#define NO cout << "NO" << endl;
#define SetBit(x, k) (x |= (1ll << k))
#define ClearBit(x, k) (x &= ~(1ll << k))
#define CheckBit(x, k) ((x >> k) & 1)
#define CC(x) cout << "Case " << ++x << ": ";
#define pi pair<long long int, long long int>
const int N = 2e5 + 10;
const int M = 998244353;

vector<ll> vg;
vector<ll> vk;
map<ll, ll> vis1;
map<ll, ll> vis2;
map<ll, ll> vis3;
unordered_map<ll, ll> vis;
unordered_map<ll, ll> depth;
vector<ll> g[N];
ll i, j, k, l, m, n, a, b, c, d, f, h, t, q, e, x, y, z, w;
ll dp[N][2];

ll f_f(ll i, ll st)
{
    if (i == n)
        return 0;
    if (dp[i][st] != -1)
        return dp[i][st];
    ll take = -1, nt = 0;
    if (vis3[vg[i]])
        nt = 1;
    nt += f_f(i + 1, 0);
    vis3[vg[i]] = 0;
    if (vis2[i] != -1)
    {
        vis3[vg[i]] = 1;
        take = vis2[i] - i + f_f(vis2[i], 1);
    }
    dp[i][st] = max(take, nt);
    return dp[i][st];
}
bool cmp(pair<long long int, long int> p1, pair<long long int, long int> p2)
{
    if (p1.first == p2.first)
    {
        return p1.second > p2.second;
    }
    else
        return p1.first < p2.first;
}
long long int binE(long long int a, long long int b)
{
    long long res = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            res = (res * a) % M;
        }
        a = (a * a) % M;
        b >>= 1;
    }
    return res;
}
map<ll, ll> facc;
ll fac(ll n)
{
    ll j, l = 1, a = 1;
    if (facc[n] != 0)
        return facc[n];
    for (j = 1; j <= n; j++)
    {
        a = (a * j) % M;
    }
    if (n == 0)
        a = 1;
    return a;
}
ll com(ll n, ll x)
{

    ll a = fac(n), b = fac(n - x);
    a = (a * binE(b, M - 2)) % M;
    if (x == 0)
        a = 1;
    if (n == x)
        a = fac(n);
    return a;
}
#define pii pair<ll, ll>
// map<pii, ll> finer, cntr;
//  void dfs(ll ver, ll par = 0)
//  {
//    vis[ver] = 1;
//    for (ll child : g[ver])
//    {
//      if (child == par)
//        continue;
//      else if (vis[child])
//      {
//        ll tmp = depth[child] + finer[{child, ver}];
//        if (tmp != depth[ver])
//        {
//          // cout<<child<<" "<<ver<<endl;
//          // cout<<depth[child]<<" "<<finer[{child,ver}]<<endl;
//          c = 0;
//        }
//        continue;
//      }
//      depth[child] = depth[ver] + finer[{ver, child}];
//      dfs(child, ver);
//      //  height[ver]=max(height[ver],height[child]+1);
//    }
//  }
map<char, int> cchar;
int okc(ll aj, ll bj)
{
    ll dh = cchar['+'], fh = (cchar['-']);

    if (aj == bj)
    {
        if (dh == fh)
            return 1;
        else
            return 0;
    }
    if (dh == fh)
        return 1;
    // if(dh<aj||fh<bj)return 0;
    if (dh == 0 || fh == 0)
        return 0;
    //  cout<<abs(dh-fh)*bj<<endl;
    if (((dh - fh) * bj) % abs(bj - aj) == 0)
    {
        ll l = ((dh - fh) * bj) / (bj - aj);
        if (l < 0)
        {
            if (abs(l) > fh)
                return 0;
            else
                return 1;
        }
        else
        {
            if (abs(l) > dh)
                return 0;
            else
                return 1;
        }
    }
    else
        return 0;
}
ll sum_d(string st)
{
    ll d = 0;
    for (int it = 0; it < st.size(); it++)
    {
        d += st[it] - '0';
    }
    return d;
}
ll dpg[201][201], adg[201][201];
ll fgm(ll x, ll y)
{
    if (x == n && y == n)
        return 0;
    if (dpg[x][y] != -1)
        return dpg[x][y];
    ll mgx = 0;
    if (x != n)
        mgx = max(mgx, dpg[x + 1][y]);
    if (y != n)
        mgx = max(mgx, dpg[x][y + 1]);
    dpg[x][y] = mgx;
    return dpg[x][y];
}
ll dig_s(ll x)
{
    ll d = 0;
    while (x)
    {
        d++;
        x /= 10;
    }
    return d;
}
int main()
{
    // cin >> t;
    // n = 1e9 + 10; // t=1;
    l = 1;
    //  for(i=0;i<=n;i++)
    //  {
    //    if(i==0)facc[i]=l;
    //    else l=(l*i)%M;
    //    facc[i]=l;
    //  }
    // for(i=1;i<=n;i*=2)vis1[i]=1;
    vis1[0] = 0;
    cin >> t;
    vector<ll> pre;
    vector<pair<ll, ll>> v_pi;
    // cout<<t<<endl;
    n = 0;
    while (t--)
    {
        cin >> n >> m;
        for (i = 0; i < m; i++)
        {
            cin >> l >> h;
            v_pi.push_back({l, h});
        }
        cin >> q;
        i = 1;
        while (q--)
        {
            cin >> x;
            vis[i] = x;
            i++;
        }
        q = i - 1;
        ll lo, mid, hig, ans = -1;
        c = 0;
        lo = 1;
        hig = q;
        while (lo <= hig)
        {
            mid = (lo + hig) / 2;
            c = 0;
            ll pre[n + 1] = {0}, arr[n + 1] = {0};
            for (i = 1; i <= mid; i++)
                arr[vis[i]] = 1;
            for (i = 1; i <= n; i++)
            {
                pre[i] = pre[i - 1] + arr[i];
            }
            for (i = 0; i < v_pi.size(); i++)
            {
                l = v_pi[i].first;
                h = v_pi[i].second;
                x = pre[h] - pre[l - 1];
                y = h - l + 1;
                y /= 2;
                if (x > y)
                    c = 1;
            }
            if (c)
            {
                ans = mid;
                hig = mid - 1;
            }
            else
            {
                lo = mid + 1;
            }
            // cout << ans << " " << mid << endl;
        }
        cout << ans << endl;
        v_pi.clear();
        vis.clear();
        // finer.clear();
        vk.clear();
        pre.clear();
        vg.clear();
        // vis.clear();
        // cntr.clear();
        vis2.clear();
        vis3.clear();
        vis1.clear();
        depth.clear();
    }
}