vector<int>heap;
int left(int i){
  return 2*i;
}
int right(int i){
  return 2*i+1;
}
int parent(int i){
  return i/2;
}
void max_heapify(vector<int>&heap,int heap_size,int i){
  int l,r,largest,t;//cout<<heap_size<<endl;
  l=left(i);r=right(i);
  if(l<=heap_size&&heap[l]>heap[i]){
    largest =l;
  }
  else{
    largest=i;
  }
  if(r<=heap_size&&heap[r]>heap[largest]){
    largest=r;
  }
  if(largest!=i){
    t=heap[i];heap[i]=heap[largest];heap[largest]=t;
    max_heapify(heap,heap_size,largest);
  }
}
void heap_sort(vector<int>&heap,int heap_size){
   int i,t;//cout<<"jabd";
   for(i=heap_size;i>1;i--){
    t=heap[1];
    heap[1]=heap[i];
    heap[i]=t;
    heap_size-=1;
    max_heapify(heap,heap_size,1); 
   }
}
void creat_heap(vector<int>&heap,int heap_size){
   int i,n=heap_size-1;
   for(i=n/2;i>=1;i--)max_heapify(heap,heap.size()-1,i);
}
int extract_max(vector<int>&heap,int heap_size){
  int max_term=heap[1];heap[1]=heap[heap_size];
  heap_size--;
  max_heapify(heap,heap_size,1);
  return max_term;
}
int insert_node(vector<int>&heap,int heap_size,int node){
  int i,p,t,l;
  i=heap_size;
  heap[heap_size]=node;
  while (i>1&&heap[i]>heap[parent(i)])
  {
    p=parent(i);t=heap[p];heap[p]=heap[i];
    heap[i]=t;i=p;
  }
  return heap_size;
}