// Faruk
// i got unexpected runtime error in erasing value from set to solve this i used the method written in below
// u should always erase from set by pointer
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define YES cout << "YES" << endl;
#define NO cout << "NO" << endl;
#define SetBit(x, k) (x |= (1ll << k))
#define ClearBit(x, k) (x &= ~(1ll << k))
#define CheckBit(x, k) ((x >> k) & 1)
#define CC(x) cout << "Case " << ++x << ": ";
#define pi pair<long long int, long long int>
const int N = 2e5 + 10;
const int M = 998244353;

vector<ll> vg;
vector<ll> vk;
unordered_map<ll, ll> vis1;
map<ll, ll> vis2;
map<ll, ll> vis3;
unordered_map<ll, ll> vis;
unordered_map<ll, ll> depth;
vector<ll> g[N];
ll i, j, k, l, m, n, a, b, c, d, f, h, t, q, e, x, y, z, w;
ll dp[N][2];

ll f_f(ll i, ll st)
{
  if (i == n)
    return 0;
  if (dp[i][st] != -1)
    return dp[i][st];
  ll take = -1, nt = 0;
  if (vis3[vg[i]])
    nt = 1;
  nt += f_f(i + 1, 0);
  vis3[vg[i]] = 0;
  if (vis2[i] != -1)
  {
    vis3[vg[i]] = 1;
    take = vis2[i] - i + f_f(vis2[i], 1);
  }
  dp[i][st] = max(take, nt);
  return dp[i][st];
}
bool cmp(pair<long long int, long int> p1, pair<long long int, long int> p2)
{
  if (p1.first == p2.first)
  {
    return p1.second > p2.second;
  }
  else
    return p1.first < p2.first;
}
long long int binE(long long int a, long long int b)
{
  long long res = 1;
  while (b > 0)
  {
    if (b & 1)
    {
      res = (res * a) % M;
    }
    a = (a * a) % M;
    b >>= 1;
  }
  return res;
}
map<ll, ll> facc;
ll fac(ll n)
{
  ll j, l = 1, a = 1;
  if (facc[n] != 0)
    return facc[n];
  for (j = 1; j <= n; j++)
  {
    a = (a * j) % M;
  }
  if (n == 0)
    a = 1;
  return a;
}
ll com(ll n, ll x)
{

  ll a = fac(n), b = fac(n - x);
  a = (a * binE(b, M - 2)) % M;
  if (x == 0)
    a = 1;
  if (n == x)
    a = fac(n);
  return a;
}
#define pii pair<ll, ll>
//map<pii, ll> finer, cntr;
// void dfs(ll ver, ll par = 0)
// {
//   vis[ver] = 1;
//   for (ll child : g[ver])
//   {
//     if (child == par)
//       continue;
//     else if (vis[child])
//     {
//       ll tmp = depth[child] + finer[{child, ver}];
//       if (tmp != depth[ver])
//       {
//         // cout<<child<<" "<<ver<<endl;
//         // cout<<depth[child]<<" "<<finer[{child,ver}]<<endl;
//         c = 0;
//       }
//       continue;
//     }
//     depth[child] = depth[ver] + finer[{ver, child}];
//     dfs(child, ver);
//     //  height[ver]=max(height[ver],height[child]+1);
//   }
// }
ll sum_d(ll x)
{
   ll d=0;
  while(x)
  {
    d+=x%10;
    x/=10;
  }
  return d;
}
ll dig_s(ll x)
{
  ll d=0;
  while(x)
  {
    d++;
    x/=10;
  }
  return d;
}
int main()
{
  cin >> t;
  //n = 1e9 + 10; // t=1;
  l = 1;
  //  for(i=0;i<=n;i++)
  //  {
  //    if(i==0)facc[i]=l;
  //    else l=(l*i)%M;
  //    facc[i]=l;
  //  }
  // for(i=1;i<=n;i*=2)vis1[i]=1;
  vis1[0] = 0;
  vector<ll> pre;
  while (t--)
  {
    cin>>n>>q;
    set<ll>sfinder;
    for(i=0;i<n;i++)
    {
      cin>>l;
      vk.push_back(l);if(dig_s(l)==1)vis1[i+1]=1;
      else sfinder.insert(i+1);
    }
    ll cntr=0;
    while(q--)
    {
      cin>>i;
      if(i==1)
      {
        cin>>l>>h;
        queue<ll>fft;
        if(sfinder.empty())continue;
       for(auto it=sfinder.lower_bound(l);it!=sfinder.end();++it)
       {
           j=*it;//cout<<j<<endl;
             if(*it>h)break;
            
             vk[j-1]=sum_d(vk[j-1]);
             if(vk[j-1]<=9)fft.push(j);
       }
       while (!fft.empty())
       {
          sfinder.erase(fft.front());fft.pop();
       }
       
      // cout<<"faruk"<<endl;
      }
      else{
        cin>>j;
        cout<<vk[j-1]<<endl;
      }
    }
    //finer.clear();
    vk.clear();
    pre.clear();
    vg.clear();
    vis.clear();
   // cntr.clear();
    vis2.clear();
    vis3.clear();
    vis1.clear();
    depth.clear();
  }
}