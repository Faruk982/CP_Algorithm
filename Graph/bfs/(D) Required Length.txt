
// Faruk
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define YES cout << "YES" << endl;
#define NO cout << "NO" << endl;
#define SetBit(x, k) (x |= (1ll << k))
#define ClearBit(x, k) (x &= ~(1ll << k))
#define CheckBit(x, k) ((x >> k) & 1)
#define CC(x) cout << "Case " << ++x << ": ";
#define pi pair<long long int, long long int>
#define fastio                  \
  ios_base::sync_with_stdio(0); \
  cin.tie(0);                   \
  cout.tie(0)
const int N = 2e5 + 10;
const int M = 1e9 + 7;

vector<ll> vg;
vector<ll> vk;
map<ll, ll> vis1;
map<ll, ll> vis2;
map<ll, ll> vis3;
map<ll, ll> vis;
unordered_map<ll, ll> depth;
vector<ll> g[N];
ll i, j, k, l, m, n, a, b, c, d, f, h, t, q, e, x, y, z, w;
map<ll, ll> rightr, leftr, parr;
vector<pi> vpair;
map<pi, ll> mpair;
map<pi, ll> mppair;
bool cmp(pair<long long int, long int> p1, pair<long long int, long int> p2)
{
  if (mpair[p1] == mpair[p2])
  {
    if (p1.second != p2.second)
      return p1.second > p2.second;
    else
      p2.second > p2.second;
  }
  else
  {
    return mpair[p1] < mpair[p2];
  }
}
long long int binE(long long int a, long long int b)
{
  long long res = 1;
  while (b > 0)
  {
    if (b & 1)
    {
      res = (res * a) % M;
    }
    a = (a * a) % M;
    b >>= 1;
  }
  return res;
}
map<ll, ll> facc, crr;

#define pii pair<ll, ll>
ll ans;
string ss;
int parent[N], sz[N];
void make(int v)
{
  parent[v] = v;
  sz[v] = 1;
}
int find(int v)
{
  if (parent[v] == v)
    return parent[v];
  else
    return parent[v] = find(parent[v]);
}
void Union(int a, int b)
{
  a = find(a);
  b = find(b);
  if (a != b)
  {
    if (sz[a] < sz[b])
    {
      swap(a, b);
    }
    parent[b] = a;
    sz[a] += sz[b];
  }
}
ll dpp[N][2];
vector<pi> vfp;
ll ai;

map<char, int> cchar;

vector<bool> isprime(N, true);
vector<ll> prime;
vector<ll> vdv[N];
ll mmf = 1, mxf;
map<ll, ll> pr;
void dfs(ll ver, ll par)
{
  // cout<<ver<<endl;
  vis[ver] = 1;
  pr[ver] = par;
  for (ll child : g[ver])
  {
    if (par == 0 && child == j)
      continue;
    if (vis[child])
      continue;
    dfs(child, ver);
  }
}
set<ll> sfi;
ll ffi(ll i)
{
  ll j = 0;
  while (i)
  {
    i /= 10;
    j++;
  }
  return j;
}
vector<ll> vset[120];
map<ll, ll> vcnt;
ll xget(ll a1, ll b1, ll c1, ll a2, ll b2, ll c2)
{
  return ((b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1));
}
ll yget(ll a1, ll b1, ll c1, ll a2, ll b2, ll c2)
{
  return ((c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1));
}
int main()
{

  vector<ll> pre;
  vector<pair<ll, ll>> v_pi;
  // fastio;
  //  #ifndef ONLINE_JUDGE
  //  	freopen("input.txt", "r", stdin);
  //  	freopen("output.txt", "w", stdout);
  //  #endif
  //   isprime[0]=isprime[1]=false;
  //   for(i=2;i<=N;i++)
  //   {
  //    if(isprime[i]){
  //        prime.push_back(i);
  //        for(j=2*i;j<=N;j+=i)isprime[j]=false;
  //    }
  //   }
  //   for(i=1;i<=N;i++)
  //   {
  //    for(j=i;j<=N;j+=i)vdv[j].push_back(i);
  //   }
  //  n=196560;
  //   for(i=1;i<=n;i++){
  //          if(n%i==0)vg.push_back(i);
  //       }
  //       cout<<vg.size()<<endl;
  //       vg.clear();
  map<ll, ll> fact;
  l = 3e5 + 10;
  fact[0] = 1;
  for (i = 1; i <= l; i++)
    fact[i] = ((fact[i - 1] % M) * ((i) % M)) % M;
  vector<ll> vsm;
  map<ll, ll> vl, vhh;

  //  for(i=0;i<=63;i++){
  //   ll cnt=0;
  //   for(j=0;j<7;j++){
  //       if(CheckBit(i,j))cnt++;
  //   }
  //   sfi.insert(i);
  //   vcnt[i]=cnt;
  //   vset[cnt].push_back(i);
  //  }
  //  vector<ll>vks;
  //  for(i=1;i<=(3e5+10);i++){
  //         vks.push_back((i*(i+1))/2);
  //  }
  // for(auto x:vset[1])cout<<x<<" ";
  //cin >> t;
  ll P, tt = 0;
  P = t;
   t=1;
  map<ll, ll> mca;

  while (t--)
  {
    vis.clear();
    vis1.clear();
    vis2.clear();
    cin >> n >> x;
    ll source = x;
    queue<ll> q;
    map<ll, ll> level;
    q.push(source);
    level[source] = 0;
    ll ans = -1;
    vis[source] = 1;
    while (!q.empty())
    {
      ll cur_v = q.front();
      q.pop();
      d = cur_v;
      if (ffi(d) == n)
      {
        ans = level[d];
        break;
      }
      while (cur_v)
      {
        h = cur_v % 10;
        cur_v /= 10;
        ll child = d;
        if (h > 1)
        {
          child = child * h;
        }
        if (!vis[child])
        {
          level[child] = level[d] + 1;
          q.push(child);
          vis[child] = 1;
        }
      }
    }
    cout<<ans<<endl;
  }
}
