#include<bits/stdc++.h>
using namespace std;
const int N=1e6+10;
#define ll long long int
vector<long long int>prime;
vector<bool>isprime(N,1);
unordered_map<int,int>vis1;
unordered_map<int,int>vis2;
unordered_map<int,int>level;
unordered_map<int,int>lol;unordered_map<int,int>lol2;
unordered_map<int,int>ind1;
unordered_map<int,int>ind2;
vector<long long int>v[N];
vector<ll>g[N];
unordered_map<ll,ll>vis;
vector<long long int>vk;
vector<long long int>v1(N,0);
vector<long long int>v2(N,0);
vector<long long int>vh;
vector<long long int>i1;
vector<long long int>i2;
//ll depth[N],height[N];
unordered_map<ll,ll>depth;
unordered_map<ll,ll>height;
long long int ar[N],br[N],cr[N],mr[N];
void dfs(ll ver,ll par){
  vis[ver]=1;
  for(ll child:g[ver]){
    if(child==par)continue;
    depth[child]=depth[ver]+1;
    dfs(child,ver);
    height[ver]=max(height[ver],height[child]+1);
  }
}
bool bfs(char source,char f){
  queue<char>q;vis.clear();level.clear();
  q.push(source);
  vis[source]=1;
  while(!q.empty()){
   char cur_v=q.front();q.pop();
   if(cur_v==f)return true;
   for(char child:g[cur_v]){
    //cout<<vis[child]<<" "<<f<<endl;
    if(!vis[child]){
      q.push(child);
      level[child]=level[cur_v]+1;
      vis[child]=1;
    }
   }
  }
  return false;
}
int main()
{
   ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    #ifdef EPSILON
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    freopen("error.txt","w",stderr);
    #endif
  long long int i,j,k,ki,kh,d,dis,lo,hi,l,m,n,t,sum,x,f,y,x2,y2,x3,y3,mid,s,r,c;
  string su,cl,sl;
  priority_queue<char, vector<char>, greater<char>>let;
  for(char ch='a';ch<='z';ch++){su+=ch;}
  su="314159265358979323846264338327";
  cin>>n;
  for(i=0;i<n;i++){
    cin>>x>>y;
    g[x].push_back(y);
    g[y].push_back(x);
  }
  int mx_node,mx_depth=-1;
  dfs(1,0);
  for(i=1;i<=n;i++){
    if(mx_depth<depth[i]){
      mx_depth=depth[i];
      mx_node=i;
    }
    depth[i]=0;
  }
  dfs(mx_node,0);
  for(i=1;i<=n;i++){
    if(mx_depth<depth[i]){
      mx_depth=depth[i];
      //mx_node=i;
    }
 
  }
   cout<<mx_depth<<endl;

 
}