#include<bits/stdc++.h>
using namespace std;
const int N=1e6+10;
const int M=1e9+7;
vector<long long int>prime;
vector<bool>isprime(N,1);
unordered_map<int,int>vis1;unordered_map<int,int>vis2;
unordered_map<int,int>level;
unordered_map<int,int>ind;
vector<long long int>vk;
vector<long long int>vg;
long long int ar[N];
priority_queue<long long int>v1;
priority_queue<long long int>v2;
vector<int>heap;
#define INF 1e9+10
#define ll long long
#define pb push_back
#define nl endl
vector<pair<ll, ll>> g[N];
vector<ll> di(N, INF);
vector<ll>vis(N,0);
long long int fr=0;
void dijkstra(ll source){
  di[source]=0;
  set<pair<ll,ll>>st;
  st.insert({0,source});
  while(st.size()>0){
    auto node=*st.begin();
    ll v=node.second;
    ll dist =node.first;
    st.erase(st.begin());
    if(vis[v])continue;
    vis[v]=1;
    for(auto child : g[v]){
      ll child_v=child.second;
      ll wt =child.first;
      if(di[v]+wt<di[child_v]){
      di[child_v]=di[v]+wt;
      st.insert({di[child_v],child_v});
      }
    }
  }
}