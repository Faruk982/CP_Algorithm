// Faruk
//if a=b^c c=a^b
#include<bits/stdc++.h>
using namespace std;
const int N = 1e6 + 10;
const int M = 1e9 + 7;
const int M1 = M - 1;
void swp(int *a, int *b)
{
  if (a == b)
    return;
  int temp = *a;
  *a = *b;
  *b = temp;
}
int partion(int ar[], int low, int high)
{
  int left, right;
  int pi = high;
  left = low;
  right = high - 1;
  while (left <= right)
  {
    while (ar[left] <= ar[pi] && left <= right)
      left++;
    while (left <= right && ar[right] > ar[pi])
      right--;
    if (left < right)
      swp(&ar[left], &ar[right]);
  }

  if (ar[left] > ar[pi])
  {

    swp(&ar[left], &ar[pi]);

    return left;
  }
  return high;
}
void quick_sort(int ar[], int low, int high)
{
  if (low >= high)
    return;
  int pi;
  pi = partion(ar, low, high);
  quick_sort(ar, low, pi - 1);
  quick_sort(ar, pi + 1, high);
}
vector<long long int> prime;
vector<bool> isprime(N, 1);
unordered_map<long long int, long long int> vis1;
unordered_map<long long int, long long int> fact;
unordered_map<long long int, long long int> vis2;
unordered_map<long long int, long long int> vis3;
unordered_map<long long int, long long int> level;
unordered_map<long long int, long long int> is_t;
// unordered_map<int,pair<int,int>>Max;
 vector<long long int> v[N];
vector<long long int> vk;
vector<long long int> vg;
vector<long long int> vh1;
vector<long long int> vh2;
vector<int> heap;
long long int binE(long long int a, long long int b)
{
  long long res = 1;
  while (b > 0)
  {
    if (b & 1)
    {
      res = (res * a) % M;
    }
    a = (a * a) % M;
    b >>= 1;
  }
  return res;
}
long long int binEE(long long int a, long long int b)
{
  long long res = 1;
  while (b > 0)
  {
    if (b & 1)
    {
      res = (res * a) % M1;
    }
    a = (a * a) % M1;
    b >>= 1;
  }
  return res;
}
long long int binM(long long int a, long long int b)
{
  long long res = 0;
  while (b > 0)
  {
    if (b & 1)
    {
      res = (res + a) % M;
    }
    a = (a + a) % M;
    b >>= 1;
  }
  return res;
}
void fak(long long a)
{
  long long int c = a;
  while (a)
  {
    if (a & 1)
      vis1[c]++;
    a >>= 1;
  }
}
// vector<bool>is_t(M,0);
/*long long int lowerBound(long long int el)
{
    long long int lo = 0, mid;
    long long int hi = vg.size() - 1;
    while (hi - lo > 1)
    {
        mid = (hi + lo) / 2;
        if (vg[mid] <= el)
        {
            lo = mid;
        }
        else
        {
            hi = mid - 1;
        }
    }
    if (vg[hi] <= el)
        return hi;
    else if (vg[lo] <= el)
        return lo;
}*/
//#define ll long long int
long long int n;
long long int dp[N];
long long int fp(long long int x)
{
   // cout<<x<<endl;
   if((x+1)>=n)
   {
   // cout<<x<<endl;
    return 0;
   }
   if(dp[x]!=-1)
   {
   // cout<<x<<endl;
    return dp[x];
   }
 long long  int c=0;
   c=max(c,fp(x+1));
//    cout<<dp[0]<<endl;
  //  cout<<x<<endl;
   if(vis1[vg[x]]==0)
   {
    int hl=v[vg[x]].size();vis1[vg[x]]=1;
    // cout<<vg[x]<<" "<<hl<<" size ";
    // cout<<v[vg[x]][hl-1]<<" ";
  //  cout<<x<<" "<<vg[x]<<endl;
   
//     cout<<v[vg[x]][hl-1]<<endl;
       int j;vis1[vg[x]]=1;int cnt=0;
       for(auto j:v[vg[x]])
       {
        if(j<x)continue;
        if(j==x)
        {
            hl=j;
        }
        if(j>x){
         //   cout<<vg[x]<<endl;
          //cout<<x<<" t ";  cout<<j<<endl;
         
          long long  int f=j-x+1+fp(j +1);
            c=max(c,f);
        }
        cnt++;
       } auto it=v[vg[x]].begin();
       if(x==*it)  v[vg[x]].erase(it);
    hl=v[vg[x]].size();
       // cout<<hl<<endl;
       vis1[vg[x]]=0;
   }
   dp[x]=c;
   return c;
   
}

long long int Bin(long long int b)
{
    long long int lo=0,hi=vg.size()-1,mid;
    while(hi-lo>1)
    {
        mid=(hi+lo)/2;
        if(vg[mid]<b)
        {
           lo=mid+1;
        }
        else{
            hi=mid;
        }
    }
    if(vg[lo]==b)return lo;
    else if(vg[hi]==b)return hi;
    //else if(vg[lo]<b)return lo;
    else return (hi+lo)/2;
}  
long long int binarySearchSqrt(long long int num) {
    if (num < 0) {
        std::cerr << "Error: Cannot calculate square root of a negative number." << std::endl;
        return -1; // Return a negative value to indicate error
    }

   long long int low = 0;
    long long int high = 3e9;
//cout<<num<<endl;
    while (low <= high) {
       long long int mid = low + (high - low) / 2;
        long long square = (mid) * mid; // Use long long to avoid integer overflow
     
        if (square <= num) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
        
    }

    return high; // Return the largest integer whose square is <= num
}
long long int i, j, k, t, a, b, c, m, g, h, l = 0, s, d, r,x,w;
int main()
{
  ios_base ::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

#ifdef EPSILON
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("error.txt", "w", stderr);
#endif

  long long int ans;
  pair<long long int, long long int> ps;
  string sh, gh, mh;//vector<long long int>vg;
  double metro, out;
  long long int sum = 0;
   isprime[0] = isprime[1] = 0;
  for (i = 2; i < N; i++)
  {
    if(isprime[i]){
      prime.push_back(i);
     for(j=i*2;j<N;j+=i)
     {
        isprime[j]=0;
     }
    }
  }
  string sf;set<pair<long long int,long long int>>sfr;
   vector<pair<long long int,long long int>>v_p;
  cin>>t;int count =0;
  while(t--)
  {
    long long int fr,kr,jr;c=1;d=0;j=-1;m=0;d=0;
     cin>>n;
     for(i=0;i<n;i++)
     {
        cin>>l;vg.push_back(l);
     }
    a=0;
    m=0;
    for(i=0;i<n;i++)
    {
      a^=vg[i];
      m=max(m,a);
      m=max(m,vg[i]);
    }
    a=0;vis1[0]=1;
    for(i=vg.size()-1;i>=0;i--)
    {
        a^=vg[i];vis1[a]=1;
        for(k=0;k<256;k++)
        {
              l=a^k;
              if(vis1[l]) m=max(m,k);
        }
     
    }

    cout<<m<<endl;
    vg.clear();vis1.clear();vk.clear();vis2.clear();vis3.clear();v_p.clear();
  }
}